// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextFlix.Persistence.Context;

#nullable disable

namespace NextFlix.Persistence.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250818161303_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NextFlix.Domain.Entities.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CastType")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action",
                            Slug = "action",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy",
                            Slug = "comedy",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama",
                            Slug = "drama",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror",
                            Slug = "horror",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sci-Fi",
                            Slug = "sci-fi",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Romance",
                            Slug = "romance",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Documentary",
                            Slug = "documentary",
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Animation",
                            Slug = "animation",
                            Status = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Thriller",
                            Slug = "thriller",
                            Status = 0
                        },
                        new
                        {
                            Id = 10,
                            Name = "Fantasy",
                            Slug = "fantasy",
                            Status = 0
                        });
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Logo")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Flag")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Flag = "",
                            Name = "United States",
                            Slug = "united-states",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Flag = "",
                            Name = "United Kingdom",
                            Slug = "united-kingdom",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Flag = "",
                            Name = "Canada",
                            Slug = "canada",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Flag = "",
                            Name = "Australia",
                            Slug = "australia",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Flag = "",
                            Name = "Germany",
                            Slug = "germany",
                            Status = 1
                        });
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieCast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CastId");

                    b.HasIndex("MovieId", "CastId")
                        .IsUnique();

                    b.ToTable("MovieCasts");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MovieId", "CategoryId")
                        .IsUnique();

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("MovieId", "ChannelId")
                        .IsUnique();

                    b.ToTable("MovieChannels");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MovieId", "CountryId")
                        .IsUnique();

                    b.ToTable("MovieCountries");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieLikes");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("MovieId", "SourceId")
                        .IsUnique();

                    b.ToTable("MovieSources");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("MovieId", "TagId")
                        .IsUnique();

                    b.ToTable("MovieTags");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieTrailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("TrailerLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId", "TrailerLink")
                        .IsUnique();

                    b.ToTable("MovieTrailers");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieViews");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action",
                            Slug = "action",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy",
                            Slug = "comedy",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama",
                            Slug = "drama",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror",
                            Slug = "horror",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sci-Fi",
                            Slug = "sci-fi",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Romance",
                            Slug = "romance",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Documentary",
                            Slug = "documentary",
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            Name = "Thriller",
                            Slug = "thriller",
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            Name = "Fantasy",
                            Slug = "fantasy",
                            Status = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Adventure",
                            Slug = "adventure",
                            Status = 2
                        });
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Cast", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Country", "Country")
                        .WithMany("Casts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Log", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Login", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Movie", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.User", "User")
                        .WithMany("Movies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieCast", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Cast", "Cast")
                        .WithMany("MovieCasts")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieCasts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieCategory", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieChannel", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Channel", "Channel")
                        .WithMany("MovieChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieChannels")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieCountry", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Country", "Country")
                        .WithMany("MovieCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieLike", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieLikes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieSource", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieSources")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextFlix.Domain.Entities.Source", "Source")
                        .WithMany("MovieSources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieTag", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieTags")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextFlix.Domain.Entities.Tag", "Tag")
                        .WithMany("MovieTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieTrailer", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieTrailers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.MovieView", b =>
                {
                    b.HasOne("NextFlix.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieViews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Cast", b =>
                {
                    b.Navigation("MovieCasts");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Category", b =>
                {
                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Channel", b =>
                {
                    b.Navigation("MovieChannels");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Country", b =>
                {
                    b.Navigation("Casts");

                    b.Navigation("MovieCountries");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieCasts");

                    b.Navigation("MovieCategories");

                    b.Navigation("MovieChannels");

                    b.Navigation("MovieCountries");

                    b.Navigation("MovieLikes");

                    b.Navigation("MovieSources");

                    b.Navigation("MovieTags");

                    b.Navigation("MovieTrailers");

                    b.Navigation("MovieViews");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Source", b =>
                {
                    b.Navigation("MovieSources");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.Tag", b =>
                {
                    b.Navigation("MovieTags");
                });

            modelBuilder.Entity("NextFlix.Domain.Entities.User", b =>
                {
                    b.Navigation("Logins");

                    b.Navigation("Logs");

                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
